}
return(group_dominance_data)
}
get_dominant_stream_class_by_hucs <- function(group_records, eflow_data=huc12_eflow_percents, counts=FALSE){
## Given a set of records from a cluster, determines the dominant stream flow class in that cluster
## and the proportion of it that is the dominant class
## If counts is TRUE, then instead of proportion, it outputs the count as the "proportion_dominant", but
## it will still include the dominant class in the list output for symbolization
eflow_records <- eflow_data %>% filter(HUC12 %in% group_records$hucs_filtered_HUC_12)
eflow_sums <- eflow_records %>% group_by(eflow_type) %>% summarise(group_sum = sum(eflow_length, na.rm=TRUE))
max_record = which.max(eflow_sums$group_sum)
proportion_dominant = eflow_sums[max_record,]$group_sum / sum(eflow_sums$group_sum)
if(counts==TRUE){
output_value = nrow(eflow_sums)
}else{
output_value = proportion_dominant
}
return(list(class=eflow_sums[max_record,]$eflow_type, result_value=output_value))
}
add_record_to_df <- function(original_df, num_groups, percent, dominant_class){
## This record will keep adding data to the end of the data frame about the dominance data
if(length(percent) == 0 || length(dominant_class) == 0){  # in some cases, we get an effective null, but it's numeric(0) - we have to test the length of it to get whether or not it's this value
return(original_df)
}
new_group_data = data.frame(number_clusters=num_groups, value=percent, dominant_class=dominant_class)
return(rbind(original_df, new_group_data))  # otherwise, append the new data to the end
}
get_cluster_dominance_data <- function(records, cluster_field, num_clusters, existing_data, counts=FALSE){
# make an empty data frame to hold the data
for(group_num in 1:num_clusters){
group_records <- records %>% dplyr::filter_(paste(cluster_field, "==", group_num))
group_info <- get_dominant_stream_class_by_hucs(group_records, counts=counts)
existing_data <- add_record_to_df(existing_data, num_clusters, group_info$result_value, group_info$class)
}
return(existing_data)
}
plot_dominance_gg <- function(dominance_data, title){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(number_clusters, value)) +
geom_point(mapping=aes(colour=dominant_class, size=5)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominant_class)) +
geom_smooth(method = "lm") +
ggtitle(title)
return(new_plot)
}
print_dominance_plots <- function(species_info, region_name){
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=FALSE)
print(plot_dominance_gg(dominance_data, title=paste("Percent Dominance by K Value in", region_name)))
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=TRUE)
print(plot_dominance_gg(dominance_data, title=paste("Number of Stream Classes by K Value in", region_name)))
}
print_dominance_plots(cv_species_info, cv_region_name)
plot_dominance_gg <- function(dominance_data, title){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(number_clusters, value)) +
geom_point(mapping=aes(colour=dominant_class, size=5)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominance_data$dominant_class)) +
geom_smooth(method = "lm") +
ggtitle(title)
return(new_plot)
}
print_dominance_plots(cv_species_info, cv_region_name)
library(sf)
library(maps)
#library(devtools)
#devtools::install_github("tidyverse/ggplot2") # need latest version of ggplot2 in order to use geom_sf
library(ggplot2)
library(rgdal)
library(tidyr)
library(dplyr)
group_palette <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a')
default_num_groups <- c(3,4,5,6,7)
huc12_eflow_percents <- read.csv("data/HUC12s_eflow_percent.csv", stringsAsFactors = FALSE)
suffix<-"groups_num"
huc_data <- sf::st_as_sf(rgdal::readOGR(paste("data/report_update/clusters2.gpkg", sep=""),"june_2018_all_current_and_historical", stringsAsFactors=FALSE))
filter_data_to_group <- function (group_name, data){
return(data %>% drop_na(paste(group_name,'_5groups_num', sep="")))
}
species_maps <-function(groupname, title, region_data){
huc_data <- filter_data_to_group(groupname, region_data)
# now, we need to convert the attributes we're using for groupings into a single column so that GGPlot can do our mapping for us with facets
# paste(groupname,"_2",suffix, sep=""),paste(groupname,"_8",suffix, sep=""),paste(groupname,"_9",suffix, sep="")
huc_data_mapping <- huc_data %>% gather(key=model_run, value=grouping, paste(groupname,"_3",suffix, sep=""),paste(groupname,"_4",suffix, sep=""),paste(groupname,"_5",suffix, sep=""),paste(groupname,"_6",suffix, sep=""),paste(groupname,"_7",suffix, sep=""))
plot <- ggplot() +
geom_sf(huc_data_mapping, lwd = 5, mapping=aes(fill=factor(grouping)), color=NA)+
scale_fill_manual(values=group_palette, limits=c(1,2,3,4,5,6,7,8,9,10)) +
ggtitle(paste(title," Species Groupings", sep="")) +
facet_wrap("model_run")+
theme_bw()+
theme(panel.grid.major = element_line(colour = 'transparent'))+
theme(strip.background = element_blank(), # facet theme control
strip.placement = "outside",
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
plot.title = element_text(hjust = 0.5))
return(list("region_map"=plot,"species_data"=huc_data))
}
species_lists_by_group_dfs <- function (data_frame, group_name, groups=default_num_groups, counts=FALSE){
data_frame <- filter_data_to_group(group_name, data_frame)
st_geometry(data_frame) <- NULL # drop the SF geometry info
remove_fields <- c("OBJECTID", "huc_8", "huc_10", "huc_12_string", "huc_12_double", "taxa_count", "geom_Length", "geom_Area", "oid_int_copy", "Shape_Length", "Shape_Area", "huc4","huc_region_group")
data_of_interest <- select(data_frame, -one_of(remove_fields))  # filters to just the current group and removes extra fields
current_field_names <-names(data_of_interest) # get the current column names
new_field_names <- gsub("Flow_Sensitive_current_", "", current_field_names)  # replace the prefix on the fields
colnames(data_of_interest) <- new_field_names
# general approach we'd want here is to make vectors of the species in each group, then add to a list
# then extend all lists to be the same length, then cbind them all to a single df and print the df
all_groupings = list()
for(grouping in groups){
output_list = list()  # make an empty output list
field_name <- paste(group_name,"_",grouping,suffix, sep="")
for(group in seq(1,grouping)){ # for each subgroup in this grouping
records_in_group <- data_of_interest %>% dplyr::filter_(paste(field_name, "==", as.character(group)))  # filters to just the current group
records_in_group <- records_in_group[, -grep(".+groups_.+", colnames(records_in_group))]  # drop columns for groupings
gathered_data <- as.data.frame(records_in_group) %>% tidyr::gather(key="species", value="presence")
found_species <- gathered_data %>% dplyr::filter(presence==1) %>% distinct(species)
g_title <- paste("group_", group, sep="")
#colnames(found_species) <- g_title  # assign it so that the data frame field has the right name before we merge it
#found_species <- sort(found_species, na.last=TRUE)
output_list[[g_title]] = found_species$species  # add the group to the output list
}
output_list <- lapply(output_list, `length<-`, max(lengths(output_list)))  # Make all of the vectors in the list the same length
all_groupings[[grouping]] <- as.data.frame(output_list)
}
return(groupings=all_groupings)
}
get_dominance_data  <- function(data_frame, group_name, groups=default_num_groups, counts=FALSE){
st_geometry(data_frame) <- NULL # drop the SF geometry info
group_dominance_data = data.frame(number_clusters=numeric(), value=numeric(), dominant_class=character())  # set it to NA to start - a function will create a data frame from it
for(grouping in groups){
field_name <- paste(group_name,"_",grouping,suffix, sep="")
group_dominance_data <- get_cluster_dominance_data(data_frame, field_name, grouping, group_dominance_data, counts=counts)  # pass in the whole DF with the extra fields - we need the HUC 12 field
}
return(group_dominance_data)
}
get_dominant_stream_class_by_hucs <- function(group_records, eflow_data=huc12_eflow_percents, counts=FALSE){
## Given a set of records from a cluster, determines the dominant stream flow class in that cluster
## and the proportion of it that is the dominant class
## If counts is TRUE, then instead of proportion, it outputs the count as the "proportion_dominant", but
## it will still include the dominant class in the list output for symbolization
eflow_records <- eflow_data %>% filter(HUC12 %in% group_records$huc_12_string)
eflow_sums <- eflow_records %>% group_by(eflow_type) %>% summarise(group_sum = sum(eflow_length, na.rm=TRUE))
max_record = which.max(eflow_sums$group_sum)
proportion_dominant = eflow_sums[max_record,]$group_sum / sum(eflow_sums$group_sum)
if(counts==TRUE){
output_value = nrow(eflow_sums)
}else{
output_value = proportion_dominant
}
return(list(class=eflow_sums[max_record,]$eflow_type, result_value=output_value))
}
add_record_to_df <- function(original_df, num_groups, percent, dominant_class){
## This record will keep adding data to the end of the data frame about the dominance data
if(length(percent) == 0 || length(dominant_class) == 0){  # in some cases, we get an effective null, but it's numeric(0) - we have to test the length of it to get whether or not it's this value
return(original_df)
}
new_group_data = data.frame(number_clusters=num_groups, value=percent, dominant_class=dominant_class)
return(rbind(original_df, new_group_data))  # otherwise, append the new data to the end
}
get_cluster_dominance_data <- function(records, cluster_field, num_clusters, existing_data, counts=FALSE){
# make an empty data frame to hold the data
for(group_num in 1:num_clusters){
group_records <- records %>% dplyr::filter_(paste(cluster_field, "==", group_num))
group_info <- get_dominant_stream_class_by_hucs(group_records, counts=counts)
existing_data <- add_record_to_df(existing_data, num_clusters, group_info$result_value, group_info$class)
}
return(existing_data)
}
plot_dominance_gg <- function(dominance_data, title){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(x=number_clusters, y=value)) +
geom_point(mapping=aes(colour=dominant_class, size=5)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominance_data$dominant_class)) +
geom_smooth(method = "lm") +
ggtitle(title)
return(new_plot)
}
print_dominance_plots <- function(species_info, region_name){
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=FALSE)
print(plot_dominance_gg(dominance_data, title=paste("Percent Dominance by K Value in", region_name)))
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=TRUE)
print(plot_dominance_gg(dominance_data, title=paste("Number of Stream Classes by K Value in", region_name)))
}
writeLines("td, th { padding : 6px } th { background-color : #fff ; color : #000; border : 1px solid #333; } td { color : #000 ; border : 1px solid #333 }", con = "mystyle.css")  # add the CSS for the data tables
ggplot() +
geom_sf(huc_data, lwd = 5, mapping=aes(fill=huc_region_group), color=NA)+
ggtitle("Region Breakout") +
theme_bw()+
theme(panel.grid.major = element_line(colour = 'transparent'))+
theme(strip.background = element_blank(), # facet theme control
strip.placement = "outside",
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
plot.title = element_text(hjust = 0.5))
cv_region_name = "central_valley"
cv_species_info <- species_maps(cv_region_name, "Central Valley", huc_data)
cv_species_info$region_map  # print the map
print_dominance_plots(cv_species_info, cv_region_name)
cv_species_lists <- species_lists_by_group_dfs(cv_species_info$species_data, cv_region_name)  # species_info$species_data is the data frame for the region
for(df in cv_species_lists){
show(knitr::kable(df, format="html"))
}
gb_region_name <- "great_basin"
gb_species_info <- species_maps(gb_region_name, "Great Basin", huc_data)
gb_species_info$region_map  # print the map
print_dominance_plots(gb_species_info, gb_region_name)
gb_species_lists <- species_lists_by_group_dfs(gb_species_info$species_data, gb_region_name)  # species_info$species_data is the data frame for the region
for(df in gb_species_lists){
show(knitr::kable(df, format="html"))
}
coast_region_name = "north_coast"
coast_species_info <- species_maps(coast_region_name, "North Coast", huc_data)
coast_species_info$region_map  # print the map
print_dominance_plots(coast_species_info, coast_region_name)
coast_species_lists <- species_lists_by_group_dfs(coast_species_info$species_data, coast_region_name)  # species_info$species_data is the data frame for the region
for(df in coast_species_lists){
show(knitr::kable(df, format="html"))
}
soco_region_name = "south_coast"
soco_species_info <- species_maps(soco_region_name, "South Coast", huc_data)
soco_species_info$region_map  # print the map
print_dominance_plots(soco_species_info, soco_region_name)
soco_species_lists <- species_lists_by_group_dfs(soco_species_info$species_data, soco_region_name)  # species_info$species_data is the data frame for the region
for(df in soco_species_lists){
show(knitr::kable(df, format="html"))
}
?match
library(sf)
library(maps)
#library(devtools)
#devtools::install_github("tidyverse/ggplot2") # need latest version of ggplot2 in order to use geom_sf
library(ggplot2)
library(rgdal)
library(tidyr)
library(dplyr)
group_palette <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a')
default_num_groups <- c(7,8,9,10)
huc12_eflow_percents <- read.csv("data/HUC12s_eflow_percent.csv", stringsAsFactors = FALSE)
suffix<-"groups_num"
huc_data <- sf::st_as_sf(rgdal::readOGR(paste("data/report_update/clusters3.gpkg", sep=""),"contiguous_7to10", stringsAsFactors=FALSE))
filter_data_to_group <- function (group_name, data){
return(data %>% drop_na(paste(group_name,'_7groups_num', sep="")))
}
species_maps <-function(groupname, title, region_data){
huc_data <- filter_data_to_group(groupname, region_data)
# now, we need to convert the attributes we're using for groupings into a single column so that GGPlot can do our mapping for us with facets
# paste(groupname,"_2",suffix, sep=""),paste(groupname,"_8",suffix, sep=""),paste(groupname,"_9",suffix, sep=""), paste(groupname,"_3",suffix, sep=""),paste(groupname,"_4",suffix, sep=""),paste(groupname,"_5",suffix, sep=""),paste(groupname,"_6",suffix, sep=""),
huc_data_mapping <- huc_data %>% gather(key=model_run, value=grouping, paste(groupname,"_7",suffix, sep=""),paste(groupname,"_8",suffix, sep=""),paste(groupname,"_9",suffix, sep=""),paste(groupname,"_10",suffix, sep=""))
plot <- ggplot() +
geom_sf(huc_data_mapping, lwd = 5, mapping=aes(fill=factor(grouping)), color=NA)+
scale_fill_manual(values=group_palette, limits=c(1,2,3,4,5,6,7,8,9,10)) +
ggtitle(paste(title," Species Groupings", sep="")) +
facet_wrap("model_run")+
theme_bw()+
theme(panel.grid.major = element_line(colour = 'transparent'))+
theme(strip.background = element_blank(), # facet theme control
strip.placement = "outside",
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
plot.title = element_text(hjust = 0.5))
return(list("region_map"=plot,"species_data"=huc_data))
}
species_lists_by_group_dfs <- function (data_frame, group_name, groups=default_num_groups, counts=FALSE){
data_frame <- filter_data_to_group(group_name, data_frame)
st_geometry(data_frame) <- NULL # drop the SF geometry info
remove_fields <- c("OBJECTID", "huc_8", "huc_10", "huc_12_string", "huc_12_double", "taxa_count", "geom_Length", "geom_Area", "oid_int_copy", "Shape_Length", "Shape_Area", "huc4","huc_region_group")
data_of_interest <- select(data_frame, -one_of(remove_fields))  # filters to just the current group and removes extra fields
current_field_names <-names(data_of_interest) # get the current column names
new_field_names <- gsub("Flow_Sensitive_current_", "", current_field_names)  # replace the prefix on the fields
colnames(data_of_interest) <- new_field_names
# general approach we'd want here is to make vectors of the species in each group, then add to a list
# then extend all lists to be the same length, then cbind them all to a single df and print the df
all_groupings = list()
for(grouping in groups){
output_list = list()  # make an empty output list
field_name <- paste(group_name,"_",grouping,suffix, sep="")
for(group in seq(1,grouping)){ # for each subgroup in this grouping
records_in_group <- data_of_interest %>% dplyr::filter_(paste(field_name, "==", as.character(group)))  # filters to just the current group
records_in_group <- records_in_group[, -grep(".+groups_.+", colnames(records_in_group))]  # drop columns for groupings
gathered_data <- as.data.frame(records_in_group) %>% tidyr::gather(key="species", value="presence")
found_species <- gathered_data %>% dplyr::filter(presence==1) %>% distinct(species)
g_title <- paste("group_", group, sep="")
#colnames(found_species) <- g_title  # assign it so that the data frame field has the right name before we merge it
#found_species <- sort(found_species, na.last=TRUE)
sorted_species <- sort(found_species$species)
output_list[[g_title]] = sorted_species  # add the group to the output list
}
output_list <- lapply(output_list, `length<-`, max(lengths(output_list)))  # Make all of the vectors in the list the same length
all_groupings[[grouping]] <- as.data.frame(output_list)
}
return(groupings=all_groupings)
}
get_dominance_data  <- function(data_frame, group_name, groups=default_num_groups, counts=FALSE){
st_geometry(data_frame) <- NULL # drop the SF geometry info
group_dominance_data = data.frame(number_clusters=numeric(), value=numeric(), dominant_class=character())  # set it to NA to start - a function will create a data frame from it
for(grouping in groups){
field_name <- paste(group_name,"_",grouping,suffix, sep="")
group_dominance_data <- get_cluster_dominance_data(data_frame, field_name, grouping, group_dominance_data, counts=counts)  # pass in the whole DF with the extra fields - we need the HUC 12 field
}
return(group_dominance_data)
}
get_dominant_stream_class_by_hucs <- function(group_records, eflow_data=huc12_eflow_percents, counts=FALSE){
## Given a set of records from a cluster, determines the dominant stream flow class in that cluster
## and the proportion of it that is the dominant class
## If counts is TRUE, then instead of proportion, it outputs the count as the "proportion_dominant", but
## it will still include the dominant class in the list output for symbolization
eflow_records <- eflow_data %>% filter(HUC12 %in% group_records$huc_12_string)
eflow_sums <- eflow_records %>% group_by(eflow_type) %>% summarise(group_sum = sum(eflow_length, na.rm=TRUE))
max_record = which.max(eflow_sums$group_sum)
proportion_dominant = eflow_sums[max_record,]$group_sum / sum(eflow_sums$group_sum)
if(counts==TRUE){
output_value = nrow(eflow_sums)
}else{
output_value = proportion_dominant
}
return(list(class=eflow_sums[max_record,]$eflow_type, result_value=output_value))
}
add_record_to_df <- function(original_df, num_groups, percent, dominant_class){
## This record will keep adding data to the end of the data frame about the dominance data
if(length(percent) == 0 || length(dominant_class) == 0){  # in some cases, we get an effective null, but it's numeric(0) - we have to test the length of it to get whether or not it's this value
return(original_df)
}
new_group_data = data.frame(number_clusters=num_groups, value=percent, dominant_class=dominant_class)
return(rbind(original_df, new_group_data))  # otherwise, append the new data to the end
}
get_cluster_dominance_data <- function(records, cluster_field, num_clusters, existing_data, counts=FALSE){
# make an empty data frame to hold the data
for(group_num in 1:num_clusters){
group_records <- records %>% dplyr::filter_(paste(cluster_field, "==", group_num))
group_info <- get_dominant_stream_class_by_hucs(group_records, counts=counts)
existing_data <- add_record_to_df(existing_data, num_clusters, group_info$result_value, group_info$class)
}
return(existing_data)
}
plot_dominance_gg <- function(dominance_data, title){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(x=number_clusters, y=value)) +
geom_point(mapping=aes(colour=dominant_class, size=5)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominance_data$dominant_class)) +
geom_smooth(method = "lm") +
ggtitle(title)
return(new_plot)
}
print_dominance_plots <- function(species_info, region_name){
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=FALSE)
print(plot_dominance_gg(dominance_data, title=paste("Percent Dominance by K Value in", region_name)))
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=TRUE)
print(plot_dominance_gg(dominance_data, title=paste("Number of Stream Classes by K Value in", region_name)))
}
cv_region_name = "central_valley"
cv_species_info <- species_maps(cv_region_name, "Central Valley", huc_data)
cv_species_lists <- species_lists_by_group_dfs(cv_species_info$species_data, cv_region_name)  # species_info$species_data is the data frame for the region
for(df in cv_species_lists){
show(knitr::kable(df, format="html"))
}
species_lists_by_group_dfs <- function (data_frame, group_name, groups=default_num_groups, counts=FALSE){
data_frame <- filter_data_to_group(group_name, data_frame)
st_geometry(data_frame) <- NULL # drop the SF geometry info
remove_fields <- c("OBJECTID", "huc_8", "huc_10", "huc_12_string", "huc_12_double", "taxa_count", "geom_Length", "geom_Area", "oid_int_copy", "Shape_Length", "Shape_Area", "huc4","huc_region_group")
data_of_interest <- select(data_frame, -one_of(remove_fields))  # filters to just the current group and removes extra fields
current_field_names <-names(data_of_interest) # get the current column names
new_field_names <- gsub("Flow_Sensitive_current_", "", current_field_names)  # replace the prefix on the fields
colnames(data_of_interest) <- new_field_names
# general approach we'd want here is to make vectors of the species in each group, then add to a list
# then extend all lists to be the same length, then cbind them all to a single df and print the df
all_groupings = list()
for(grouping in groups){
output_list = list()  # make an empty output list
field_name <- paste(group_name,"_",grouping,suffix, sep="")
for(group in seq(1,grouping)){ # for each subgroup in this grouping
records_in_group <- data_of_interest %>% dplyr::filter_(paste(field_name, "==", as.character(group)))  # filters to just the current group
records_in_group <- records_in_group[, -grep(".+groups_.+", colnames(records_in_group))]  # drop columns for groupings
gathered_data <- as.data.frame(records_in_group) %>% tidyr::gather(key="species", value="presence")
found_species <- gathered_data %>% dplyr::filter(presence==1) %>% distinct(species)
g_title <- paste("group_", group, sep="")
#colnames(found_species) <- g_title  # assign it so that the data frame field has the right name before we merge it
#found_species <- sort(found_species, na.last=TRUE)
sorted_species <- sort(found_species$species)
output_list[[g_title]] = sorted_species  # add the group to the output list
}
output_list <- lapply(output_list, `length<-`, max(lengths(output_list)))  # Make all of the vectors in the list the same length
all_groupings[[grouping]] <- as.data.frame(output_list)
}
return(groupings=all_groupings)
}
id_to_title <- function(x) {  # adapted from R docs via SO: https://stackoverflow.com/a/6364905
s <- strsplit(x, "_")[[1]]
return(paste(toupper(substring(s, 1,1)), substring(s, 2), sep="", collapse=" "))
}
filter_data_to_group <- function (group_name, data){
return(data %>% drop_na(paste(group_name,'_5groups_num', sep="")))
}
huc_data <- sf::st_as_sf(rgdal::readOGR(paste("data/report_update/clusters2.gpkg", sep=""),"june_2018_current_notrans_neighbors", stringsAsFactors=FALSE))
cv_species_info <- species_maps(cv_region_name, "Central Valley Drainage, Including West Slope Sierra, Pit, and East Coast Range", huc_data, inset_image=here("maps/central_valley_inset.png"), inset_x=1160,inset_y=1165)
species_maps <- function(groupname, title, region_data, inset_image=NA, inset_x=0, inset_y=1165){
##
##
##  overview image is a premade map we'll composite into the corner
huc_data <- filter_data_to_group(groupname, region_data)
# now, we need to convert the attributes we're using for groupings into a single column so that GGPlot can do our mapping for us with facets
# paste(groupname,"_2",suffix, sep=""),paste(groupname,"_8",suffix, sep=""),paste(groupname,"_9",suffix, sep="")
huc_data_mapping <- huc_data %>% gather(key=model_run, value=grouping, paste(groupname,"_3",suffix, sep=""),paste(groupname,"_4",suffix, sep=""),paste(groupname,"_5",suffix, sep=""),paste(groupname,"_6",suffix, sep=""),paste(groupname,"_7",suffix, sep=""))
for(value in default_num_groups){  # make the labels come out nice-y nice
huc_data_mapping$model_run <- sub(paste(groupname,"_",value,suffix,sep=""), paste(value, "Groups"), huc_data_mapping$model_run)
}
huc_data_mapping$Grouping <- as.factor(huc_data_mapping$grouping)  # do it out here so that on the legend it just says "Grouping"
plot <- ggplot() +
geom_sf(huc_data_mapping, lwd = 5, mapping=aes(fill=Grouping), color=NA)+
scale_fill_manual(values=group_palette, limits=c(1,2,3,4,5,6,7,8,9,10)) +
ggtitle(paste(title," Species Groupings", sep="")) +
facet_wrap("model_run")+
theme_bw()+
theme(panel.grid.major = element_line(colour = 'transparent'))+
theme(strip.background = element_blank(), # facet theme control
strip.placement = "outside",
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
plot.title = element_text(hjust = 0.5))
if (!is.na(inset_image)){  # if we want to composite an overview image in
filename=paste0(here("plots//"), last_plot()$labels$title, ".png")  # we'll need to save it out first
ggsave(plot=plot, filename = filename,
width = 12, height = 12, dpi = 150)
plot_flat <- image_read(filename)  # then read it back in
# And bring in a logo
overview_raw <- image_read(inset_image)  # read the overview
# Stack them on top of each other
plot <- image_composite(plot_flat, overview_raw, offset=paste("+",inset_x,"+",inset_y,sep=""))
}
return(list("region_map"=plot,"species_data"=huc_data))
}
get_dominance_data  <- function(data_frame, group_name, groups=default_num_groups, counts=FALSE){
st_geometry(data_frame) <- NULL # drop the SF geometry info
group_dominance_data = data.frame(number_clusters=numeric(), value=numeric(), dominant_class=character())  # set it to NA to start - a function will create a data frame from it
for(grouping in groups){
field_name <- paste(group_name,"_",grouping,suffix, sep="")
group_dominance_data <- get_cluster_dominance_data(data_frame, field_name, grouping, group_dominance_data, counts=counts)  # pass in the whole DF with the extra fields - we need the HUC 12 field
}
return(group_dominance_data)
}
get_dominant_stream_class_by_hucs <- function(group_records, eflow_data=huc12_eflow_percents, counts=FALSE){
## Given a set of records from a cluster, determines the dominant stream flow class in that cluster
## and the proportion of it that is the dominant class
## If counts is TRUE, then instead of proportion, it outputs the count as the "proportion_dominant", but
## it will still include the dominant class in the list output for symbolization
eflow_records <- eflow_data %>% filter(HUC12 %in% group_records$huc_12_string)
eflow_sums <- eflow_records %>% group_by(eflow_type) %>% summarise(group_sum = sum(eflow_length, na.rm=TRUE))
max_record = which.max(eflow_sums$group_sum)
proportion_dominant = eflow_sums[max_record,]$group_sum / sum(eflow_sums$group_sum)
if(counts==TRUE){
output_value = nrow(eflow_sums)
}else{
output_value = proportion_dominant
}
return(list(class=eflow_sums[max_record,]$eflow_type, result_value=output_value))
}
get_cluster_dominance_data <- function(records, cluster_field, num_clusters, existing_data, counts=FALSE){
# make an empty data frame to hold the data
for(group_num in 1:num_clusters){
group_records <- records %>% dplyr::filter_(paste(cluster_field, "==", group_num))
group_info <- get_dominant_stream_class_by_hucs(group_records, counts=counts)
existing_data <- add_record_to_df(existing_data, num_clusters, group_info$result_value, group_info$class)
}
return(existing_data)
}
plot_dominance_gg <- function(dominance_data, title, y_label){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(x=number_clusters, y=value, size=5)) +
geom_point(mapping=aes(colour=dominant_class)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominance_data$dominant_class)) +
labs(title=title, x="Number of Clusters", y=y_label)
return(new_plot)
}
plot_dominance_gg <- function(dominance_data, title, y_label){
# coloration via: https://stackoverflow.com/a/21146026/587938
new_plot <- ggplot(dominance_data, aes(x=number_clusters, y=value, size=5)) +
geom_point(mapping=aes(colour=dominant_class)) +
scale_colour_discrete(drop=TRUE, limits = levels(dominance_data$dominant_class)) +
labs(title=title, x="Number of Clusters", y=y_label)
return(new_plot)
}
print_dominance_plots <- function(species_info, region_name){
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=FALSE)
print(plot_dominance_gg(dominance_data, title=paste("Percent Dominance by K Value in", id_to_title(region_name)), y_label="Percent of Cluster Covered by Dominant Stream Class"))
dominance_data <- get_dominance_data(species_info$species_data, region_name, counts=TRUE)
print(plot_dominance_gg(dominance_data, title=paste("Number of Stream Classes by K Value in", id_to_title(region_name)), y_label="Number of Distinct Stream Classes in Each Cluster"))
}
cv_species_info <- species_maps(cv_region_name, "Central Valley Drainage, Including West Slope Sierra, Pit, and East Coast Range", huc_data, inset_image=here("maps/central_valley_inset.png"), inset_x=1160,inset_y=1165)
library(magick)
cv_species_info <- species_maps(cv_region_name, "Central Valley Drainage, Including West Slope Sierra, Pit, and East Coast Range", huc_data, inset_image=here("maps/central_valley_inset.png"), inset_x=1160,inset_y=1165)
library(here)
cv_species_info <- species_maps(cv_region_name, "Central Valley Drainage, Including West Slope Sierra, Pit, and East Coast Range", huc_data, inset_image=here("maps/central_valley_inset.png"), inset_x=1160,inset_y=1165)
cv_species_info <- species_maps(cv_region_name, "Central Valley Drainage, Including West Slope Sierra, Pit, and East Coast Range", huc_data, inset_image=here("maps/central_valley_inset.png"), inset_x=1160,inset_y=1165)
cv_species_lists <- species_lists_by_group_dfs(cv_species_info$species_data, cv_region_name)  # species_info$species_data is the data frame for the region
default_num_groups <- c(3,4,5,6,7)
cv_species_lists <- species_lists_by_group_dfs(cv_species_info$species_data, cv_region_name)  # species_info$species_data is the data frame for the region
for(df in cv_species_lists){
show(knitr::kable(df, format="html"))
}
coast_region_name = "north_coast"
coast_species_info <- species_maps(coast_region_name, "North Coast", huc_data)#, inset_image=here("maps/north_coast_inset.png"),inset_x=1105, inset_y=1165)
coast_species_lists <- species_lists_by_group_dfs(coast_species_info$species_data, coast_region_name)  # species_info$species_data is the data frame for the region
for(df in coast_species_lists){
show(knitr::kable(df, format="html"))
}
soco_species_info <- species_maps(soco_region_name, "South Coast", huc_data)#, inset_image=here("maps/south_coast_inset.png"),inset_x=1235, inset_y=1005)
soco_region_name = "south_coast"
soco_species_info <- species_maps(soco_region_name, "South Coast", huc_data)#, inset_image=here("maps/south_coast_inset.png"),inset_x=1235, inset_y=1005)
soco_species_lists <- species_lists_by_group_dfs(soco_species_info$species_data, soco_region_name)  # species_info$species_data is the data frame for the region
soco_species_lists <- species_lists_by_group_dfs(soco_species_info$species_data, soco_region_name)  # species_info$species_data is the data frame for the region
for(df in soco_species_lists){
show(knitr::kable(df, format="html"))
}
